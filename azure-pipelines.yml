
parameters: 
  - name: ModulePath
    type: string
    default: 
  - name: PesterMaxVersion
    type: string
    default: '4.99.99'
stages: 
  - stage: PowerShellStaticAnalysis
    displayName: Static Analysis
    condition: succeeded()
    jobs: 
      - job: PSScriptAnalyzer
        displayName: PSScriptAnalyzer
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: |
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name PSDevOps -Repository PSGallery -Force -Scope CurrentUser
              Import-Module PSDevOps -Force -PassThru
            displayName: InstallPSDevOps
          - powershell: |
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -Scope CurrentUser
              Import-Module PSScriptAnalyzer -Force -PassThru
            displayName: InstallPSScriptAnalyzer
          - powershell: |
              Import-Module PSScriptAnalyzer, PSDevOps
              $invokeScriptAnalyzerSplat = @{Path='.\'}
              if ($ENV:PSScriptAnalyzer_Recurse) {
                  $invokeScriptAnalyzerSplat.Recurse = $true
              }
              $result = Invoke-ScriptAnalyzer @invokeScriptAnalyzerSplat
              
              foreach ($r in $result) {
                  if ('information', 'warning' -contains $r.Severity) {
                      Write-ADOWarning -Message $r.Message -SourcePath $r.ScriptPath -LineNumber $r.Line -ColumnNumber $r.Column
                  }
                  elseif ($r.Severity -eq 'Error') {
                      Write-ADOError -Message $r.Message -SourcePath $r.ScriptPath -LineNumber $r.Line -ColumnNumber $r.Column
                  }
              }
            displayName: RunPSScriptAnalyzer

  - stage: TestPowerShellCrossPlatform
    displayName: Test
    jobs: 
      - job: Windows
        displayName: Windows
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -MaximumVersion $PesterMaxVersion -SkipPublisherCheck -AllowClobber
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion} @Parameters
            displayName: InstallPester
          - powershell: |
              $Parameters = @{}
              $Parameters.ModulePath = ${{coalesce(format('"{0}"',parameters.ModulePath), '$null')}};
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $ModulePath,
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              if (-not $ModulePath) {
                  $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
                  $ModulePath = ".\$moduleName.psd1"
              }
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion | Out-Host
              Import-Module $ModulePath -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              
              $psDevOpsImported = Import-Module PSDevOps -Force -PassThru -ErrorAction SilentlyContinue
              
              if ($psDevOpsImported) {
                  foreach ($pesterTestResult in $pesterResults.TestResult) {
                      if ($pesterTestResult.Result -eq 'Failed') {
                          $foundLineNumber = [Regex]::Match($pesterTestResult.StackTrace, ':\s{0,}(?<Line>\d+)\s{0,}\w{1,}\s{0,}(?<File>.+)$', 'Multiline')
                          $errSplat = @{
                              Message = $pesterTestResult.ErrorRecord.Exception.Message
                              Line = $foundLineNumber.Groups["Line"].Value
                              SourcePath = $foundLineNumber.Groups["File"].Value
                          }
              
                          Write-ADOError @errSplat
                      }    
                  }    
              } else {
                  if ($result.FailedCount -gt 0) {
                      throw "$($result.FailedCount) tests failed."
                  }
              }} @Parameters
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)
      - job: Linux
        displayName: Linux
        pool: 
          vmImage: ubuntu-latest
        steps: 
          - script: |
              
              curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
              curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
              sudo apt-get update
              sudo apt-get install -y powershell
                  
            displayName: Install PowerShell Core
          - pwsh: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -MaximumVersion $PesterMaxVersion -SkipPublisherCheck -AllowClobber
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion} @Parameters
            displayName: InstallPester
          - pwsh: |
              $Parameters = @{}
              $Parameters.ModulePath = ${{coalesce(format('"{0}"',parameters.ModulePath), '$null')}};
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $ModulePath,
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              if (-not $ModulePath) {
                  $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
                  $ModulePath = ".\$moduleName.psd1"
              }
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion | Out-Host
              Import-Module $ModulePath -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              
              $psDevOpsImported = Import-Module PSDevOps -Force -PassThru -ErrorAction SilentlyContinue
              
              if ($psDevOpsImported) {
                  foreach ($pesterTestResult in $pesterResults.TestResult) {
                      if ($pesterTestResult.Result -eq 'Failed') {
                          $foundLineNumber = [Regex]::Match($pesterTestResult.StackTrace, ':\s{0,}(?<Line>\d+)\s{0,}\w{1,}\s{0,}(?<File>.+)$', 'Multiline')
                          $errSplat = @{
                              Message = $pesterTestResult.ErrorRecord.Exception.Message
                              Line = $foundLineNumber.Groups["Line"].Value
                              SourcePath = $foundLineNumber.Groups["File"].Value
                          }
              
                          Write-ADOError @errSplat
                      }    
                  }    
              } else {
                  if ($result.FailedCount -gt 0) {
                      throw "$($result.FailedCount) tests failed."
                  }
              }} @Parameters
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)
      - job: MacOS
        displayName: MacOS
        pool: 
          vmImage: macos-latest
        steps: 
          - script: |
              brew update
              brew tap caskroom/cask
              brew cask install powershell
            displayName: Install PowerShell Core
          - pwsh: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -MaximumVersion $PesterMaxVersion -SkipPublisherCheck -AllowClobber
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion} @Parameters
            displayName: InstallPester
          - pwsh: |
              $Parameters = @{}
              $Parameters.ModulePath = ${{coalesce(format('"{0}"',parameters.ModulePath), '$null')}};
              $Parameters.PesterMaxVersion = ${{coalesce(format('"{0}"',parameters.PesterMaxVersion), '$null')}};
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              & {param(
              [string]
              $ModulePath,
              [string]
              $PesterMaxVersion = '4.99.99'
              )
              
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              if (-not $ModulePath) {
                  $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
                  $ModulePath = ".\$moduleName.psd1"
              }
              Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion | Out-Host
              Import-Module $ModulePath -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              
              $psDevOpsImported = Import-Module PSDevOps -Force -PassThru -ErrorAction SilentlyContinue
              
              if ($psDevOpsImported) {
                  foreach ($pesterTestResult in $pesterResults.TestResult) {
                      if ($pesterTestResult.Result -eq 'Failed') {
                          $foundLineNumber = [Regex]::Match($pesterTestResult.StackTrace, ':\s{0,}(?<Line>\d+)\s{0,}\w{1,}\s{0,}(?<File>.+)$', 'Multiline')
                          $errSplat = @{
                              Message = $pesterTestResult.ErrorRecord.Exception.Message
                              Line = $foundLineNumber.Groups["Line"].Value
                              SourcePath = $foundLineNumber.Groups["File"].Value
                          }
              
                          Write-ADOError @errSplat
                      }    
                  }    
              } else {
                  if ($result.FailedCount -gt 0) {
                      throw "$($result.FailedCount) tests failed."
                  }
              }} @Parameters
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)

    condition: succeeded()
  - stage: UpdatePowerShellGallery
    displayName: Update
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables: 
      - group: Gallery
    jobs: 
      - job: Publish
        displayName: PowerShell Gallery
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: |
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              $imported = Import-Module ".\$moduleName.psd1" -Force -PassThru
              $foundModule = Find-Module -Name $ModuleName
              if ($foundModule.Version -ge $imported.Version) {
                  Write-Warning "##vso[task.logissue type=warning]Gallery Version of $moduleName is more recent ($($foundModule.Version) >= $($imported.Version))"
              } else {
                  $gk = '$(GalleryKey)'
                  $stagingDir = '$(Build.ArtifactStagingDirectory)'
                  $moduleTempPath = Join-Path $stagingDir $moduleName
                          
                  Write-Host "Staging Directory: $ModuleTempPath"
                                      
                  $imported | Split-Path | Copy-Item -Destination $moduleTempPath -Recurse
                  $moduleGitPath = Join-Path $moduleTempPath '.git'
                  Write-Host "Removing .git directory"
                  Remove-Item -Recurse -Force $moduleGitPath
                  Write-Host "Module Files:"
                  Get-ChildItem $moduleTempPath -Recurse
                  Write-Host "Publishing $moduleName [$($imported.Version)] to Gallery"
                  Publish-Module -Path $moduleTempPath -NuGetApiKey $gk
                  if ($?) {
                      Write-Host "Published to Gallery"
                  } else {
                      Write-Host "Gallery Publish Failed"
                      exit 1
                  }
              }
            displayName: PublishPowerShellGallery


