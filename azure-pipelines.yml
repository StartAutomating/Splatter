jobs:
  - job: Windows
    pool:
      vmImage: vs2017-win2016
    steps:
    - powershell: |
        Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
        Import-Module Pester -Force -PassThru
      displayName: Installing Pester
    - powershell: |
        $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
        Import-Module ".\$moduleName.psd1" -Force -PassThru | Out-Host
        $result = 
            Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
        if ($result.FailedCount -gt 0) {
          throw "$($result.FailedCount) tests failed."
        }
      displayName: 'Run Tests on Windows'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*.TestResults.xml'
        mergeTestResults: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/*.Coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)'
  - job: Linux
    pool:
      vmImage: ubuntu-16.04
    steps:
    - script: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
        sudo apt-get update
        sudo apt-get install -y powershell
      displayName: 'Install PowerShell Core'

    - script: |
        pwsh -c '
        $PSVersionTable.PSVersion
        if ($null -eq (Get-Module -ListAvailable pester)) {
            Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
        }
        $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
        Import-Module ".\$moduleName.psd1" -Force -PassThru
        $result = 
            Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" `
                -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
        if ($result.FailedCount -gt 0) {
            throw "$($result.FailedCount) tests failed."
        }'
      displayName: 'Run Tests on Linux'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*.TestResults.xml'
        mergeTestResults: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/*.Coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)'
  - job: Mac
    pool:
      vmImage: xcode9-macos10.13
    steps:
    - script: |
        brew update
        brew tap caskroom/cask
        brew cask install powershell
      displayName: 'Install PowerShell Core'
    - script: |
        pwsh -c '
        $PSVersionTable.PSVersion
        if ($null -eq (Get-Module -ListAvailable pester)) {
            Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
        }
        $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
        Import-Module ".\$moduleName.psd1" -Force -PassThru 
        $result = 
            Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" `
                -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
        if ($result.FailedCount -gt 0) {
            throw "$($result.FailedCount) tests failed."
        }'
      displayName: 'Run Tests on macOS'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*.TestResults.xml'
        mergeTestResults: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '**/*.Coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)'
  - job: PostBuild
    dependsOn:
    - Windows
    - Linux
    - Mac 
    condition: |
        and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: vs2017-win2016        
    steps:
    - powershell: |
        $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
        $imported = Import-Module ".\$moduleName.psd1" -Force -PassThru
        $foundModule = Find-Module -Name $ModuleName
        if ($foundModule.Version -ge $imported.Version) {
            Write-Warning "##vso[task.logissue type=warning]Gallery Version of $moduleName is more recent ($($foundModule.Version) >= $($imported.Version))"
        } else {
            $gk = '$(GalleryKey)'
            $stagingDir = '$(Build.ArtifactStagingDirectory)'
            $moduleTempPath = Join-Path $stagingDir $moduleName
            
            Write-Host "Staging Directory: $ModuleTempPath"
                        
            $imported | Split-Path | Copy-Item -Destination $moduleTempPath -Recurse
            $moduleGitPath = Join-Path $moduleTempPath '.git'
            Write-Host "Removing .git directory"
            Remove-Item -Recurse -Force $moduleGitPath
            Write-Host "Module Files:"
            Get-ChildItem $moduleTempPath -Recurse
            Write-Host "Publishing $moduleName [$($imported.Version)] to Gallery"
            Publish-Module -Path $moduleTempPath -NuGetApiKey $gk
            if ($?) {
                Write-Host "Published to Gallery"
            } else {
                Write-Host "Gallery Publish Failed"
                exit 1
            }
        }

      displayName: 'Publish to Gallery'
variables:
- group: Gallery
trigger:
  paths:
    exclude:
    - '*.md'
    - '*.help.txt'